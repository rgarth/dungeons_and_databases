// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  characters    Character[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// NEW: Core D&D Content Tables
model Spell {
  id           String @id @default(cuid())
  name         String @unique
  level        Int    // 0 for cantrips, 1-9 for spell levels
  school       String // Abjuration, Conjuration, etc.
  castingTime  String // "1 action", "1 bonus action", etc.
  range        String // "Self", "Touch", "30 feet", etc.
  components   String // "V, S", "V, S, M", etc.
  duration     String // "Instantaneous", "1 minute", etc.
  description  String
  classes      String // JSON array of class names
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Weapon {
  id         String  @id @default(cuid())
  name       String  @unique
  type       String  // "Simple" or "Martial"
  category   String  // "Melee" or "Ranged"
  damage     String  // "1d6", "1d8", etc.
  damageType String  // "Slashing", "Piercing", "Bludgeoning"
  properties String  // JSON array of properties
  weight     Float
  cost       String  // "10 gp", "5 sp", etc.
  stackable  Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Armor {
  id                   String   @id @default(cuid())
  name                 String   @unique
  type                 String   // "Light", "Medium", "Heavy", "Shield"
  baseAC               Int
  maxDexBonus          Int?     // null means no limit (light armor)
  minStrength          Int?     // minimum strength requirement
  stealthDisadvantage  Boolean  @default(false)
  weight               Float
  cost                 String   // "50 gp", "1500 gp", etc.
  description          String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Equipment {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String   // "Adventuring Gear", "Tools", "Trade Goods", etc.
  cost        String   // "1 gp", "25 gp", etc.
  weight      Float?   // Some items have no weight
  description String?
  stackable   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MagicalItem {
  id                  String   @id @default(cuid())
  name                String   @unique
  type                String   // "Wondrous Item", "Ring", "Potion", "Scroll", "Wand", "Rod", "Staff", etc.
  rarity              String   // "Common", "Uncommon", "Rare", "Very Rare", "Legendary", "Artifact"
  requiresAttunement  Boolean  @default(false)
  description         String
  weight              Float?   // Some items have no weight
  cost                String?  // "500 gp", "5000 gp", etc. - may be null for priceless items
  effects             Json?    // Store stat modifications and special effects as JSON
  stackable           Boolean  @default(false) // Most magical items don't stack, but potions do
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Character {
  id          String @id @default(cuid())
  name        String
  race        String
  class       String
  level       Int    @default(1)
  background  String?
  alignment   String?
  
  // Core Stats
  strength     Int @default(10)
  dexterity    Int @default(10)
  constitution Int @default(10)
  intelligence Int @default(10)
  wisdom       Int @default(10)
  charisma     Int @default(10)
  
  // Derived Stats
  hitPoints    Int @default(10)
  maxHitPoints Int @default(10)
  temporaryHitPoints Int @default(0)
  armorClass   Int @default(10)
  speed        Int @default(30)
  
  // Death Saves (for 0 HP situations)
  deathSaveSuccesses Int @default(0) // 0-3
  deathSaveFailures  Int @default(0) // 0-3
  
  // Skills & Proficiencies
  proficiencyBonus Int @default(2)
  skills           Json? // Store skill proficiencies as JSON
  
  // Equipment & Inventory
  inventory Json? // Store inventory items as JSON
  equipment Json? // Store equipped items as JSON
  weapons   Json? // Store equipped weapons as JSON
  inventoryWeapons Json? // Store unequipped weapons in inventory as JSON
  armor     Json? // Store equipped armor as JSON
  inventoryArmor Json? // Store unequipped armor in inventory as JSON
  magicalItems Json? // Store equipped magical items as JSON
  inventoryMagicalItems Json? // Store unequipped magical items in inventory as JSON
  attunedItems Json? // Store list of attuned magical item names (max 3)
  
  // Money
  copperPieces  Int @default(0)
  silverPieces  Int @default(0)
  goldPieces    Int @default(0)
  treasures     Json? // Store valuable items/treasures with their worth
  
  // Spellcasting
  spellsKnown     Json? // Store all spells the character knows/has in spellbook as JSON
  spellsPrepared  Json? // Store currently prepared/equipped spells as JSON
  spellSlots      Json? // Store spell slot levels and counts as JSON
  spellcastingAbility String? // Primary spellcasting ability
  spellSaveDC     Int? // Spell save difficulty class
  spellAttackBonus Int? // Spell attack bonus
  
  // Combat Actions
  actions        Json? // Store available actions as JSON
  bonusActions   Json? // Store bonus actions as JSON
  reactions      Json? // Store reactions as JSON
  
  // Character Details
  appearance   String?
  personality  String?
  backstory    String?
  notes        String?
  avatar       String? // Store selected avatar filename (e.g., "Human_Fighter_Male.png")
  inspiration  Boolean @default(false) // DM-awarded inspiration (binary: have it or don't)
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
