generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  characters       Character[]
  customWeapons    CustomWeapon[]
  gamesAsDM        Game[]            @relation("GameDM")
  gameChatMessages GameChatMessage[] @relation("GameChatMessage")
  gameInvites      GameInvite[]      @relation("GameInviteCreator")
  gameNotes        GameNote[]        @relation("GameNoteDM")
  gameParticipants GameParticipant[] @relation("GameParticipant")
  sessions         Session[]
  preferences      UserPreference?
}

model Character {
  id                    String       @id @default(cuid())
  name                  String
  race                  String
  subrace               String?
  level                 Int          @default(1)
  background            String
  alignment             String
  experience            Int          @default(0)
  strength              Int
  dexterity             Int
  constitution          Int
  intelligence          Int
  wisdom                Int
  charisma              Int
  hitPoints             Int
  maxHitPoints          Int
  armorClass            Int
  speed                 Int
  personalityTraits     Json?
  ideals                Json?
  bonds                 Json?
  flaws                 Json?
  appearance            String?
  inventory             Json?
  weapons               Json?
  armor                 Json?
  languages             Json?
  equipment             Json?
  gold                  Float        @default(0)
  copper                Int          @default(0)
  silver                Int          @default(0)
  electrum              Int          @default(0)
  platinum              Int          @default(0)
  avatarUrl             String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  userId                String
  actions               Json?
  age                   Int?
  ammunition            Json?
  attunedItems          Json?
  avatar                String?
  backstory             String?
  bonusActions          Json?
  class                 String
  classes               Json?
  conditions            Json?
  copperPieces          Int?         @default(0)
  deathSaveFailures     Json         @default("[false, false, false]")
  deathSaveSuccesses    Json         @default("[false, false, false]")
  equippedArmor         Json?
  equippedWeapons       Json?
  fullBodyAvatar        String?
  gender                String?
  goldPieces            Int?         @default(0)
  inspiration           Boolean?     @default(false)
  inventoryArmor        Json?
  inventoryMagicalItems Json?
  inventoryWeapons      Json?
  kiPoints              Int?         @default(0)
  languageSources       Json?        @default("{}")
  magicalItems          Json?
  notes                 String?
  personality           String?
  proficiencyBonus      Int?         @default(2)
  racialTraits          Json?
  reactions             Json?
  selectedFeatures      Json?
  silverPieces          Int?         @default(0)
  skillSources          Json?        @default("{}")
  skills                Json?
  spellAttackBonus      Int?
  spellSaveDC           Int?
  spellSlots            Json?
  spellcastingAbility   String?
  spellsKnown           Json?
  spellsPrepared        Json?
  subclass              String?
  temporaryHitPoints    Int?         @default(0)
  totalLevel            Int?
  treasures             Json?
  usedKiPoints          Int?         @default(0)
  usedSpellSlots        Json?
  avatarImage           AvatarImage?
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([kiPoints])
  @@index([usedKiPoints])
  @@index([languageSources], map: "idx_character_language_sources", type: Gin)
  @@index([skillSources], map: "idx_character_skill_sources", type: Gin)
}

model CustomWeapon {
  id             String   @id @default(cuid())
  name           String
  baseWeaponName String
  modifier       Int      @default(0)
  customName     String?
  description    String?
  creatorId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creator        User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([creatorId, name])
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  dieColor  String   @default("#dc2626")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AvatarImage {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  characterId String    @unique @map("character_id")
  imageData   Bytes     @map("image_data")
  mimeType    String    @default("image/png") @map("mime_type")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([characterId], map: "idx_avatarimage_character_id")
}

model Game {
  id           String            @id @default(dbgenerated("(gen_random_uuid())::text"))
  name         String
  description  String?
  gameNotes    String?           @map("gameNotes")
  dmNotes      String?           @map("dmNotes")
  dmId         String            @map("dm_id")
  createdAt    DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  isActive     Boolean           @default(true) @map("is_active")
  encounters   Encounter[]
  dm           User              @relation("GameDM", fields: [dmId], references: [id], onDelete: Cascade)
  chatMessages GameChatMessage[]
  invites      GameInvite[]
  notes        GameNote[]
  participants GameParticipant[]

  @@index([dmId], map: "idx_games_dm_id")
  @@index([createdAt], map: "idx_games_created_at")
}

model GameInvite {
  id         String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  gameId     String    @map("game_id")
  inviteCode String    @unique @map("invite_code")
  createdBy  String    @map("created_by")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt  DateTime? @map("expires_at") @db.Timestamptz(6)
  maxUses    Int?      @map("max_uses")
  usedCount  Int       @default(0) @map("used_count")
  isActive   Boolean   @default(true) @map("is_active")
  creator    User      @relation("GameInviteCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  game       Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId], map: "idx_game_invites_game_id")
  @@index([inviteCode], map: "idx_game_invites_invite_code")
}

model GameParticipant {
  id           String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  gameId       String   @map("game_id")
  userId       String   @map("user_id")
  characterIds Json     @default("[]") @map("character_ids")
  joinedAt     DateTime @default(now()) @map("joined_at") @db.Timestamptz(6)
  isDm         Boolean  @default(false) @map("is_dm")
  game         Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user         User     @relation("GameParticipant", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameId, userId])
  @@index([gameId], map: "idx_game_participants_game_id")
  @@index([userId], map: "idx_game_participants_user_id")
  @@index([characterIds], map: "idx_game_participants_character_ids", type: Gin)
}

model GameNote {
  id        String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  gameId    String   @map("game_id")
  dmId      String   @map("dm_id")
  title     String
  content   String?
  isPublic  Boolean  @default(false) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  dm        User     @relation("GameNoteDM", fields: [dmId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId], map: "idx_game_notes_game_id")
  @@index([dmId], map: "idx_game_notes_dm_id")
}

model GameChatMessage {
  id        String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  gameId    String   @map("game_id")
  userId    String   @map("user_id")
  userName  String   @map("user_name")
  message   String
  type      String   @default("text")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation("GameChatMessage", fields: [userId], references: [id], onDelete: Cascade)

  @@index([gameId], map: "idx_game_chat_messages_game_id")
  @@index([userId], map: "idx_game_chat_messages_user_id")
  @@index([createdAt], map: "idx_game_chat_messages_created_at")
}

model Encounter {
  id                   String                 @id @default(dbgenerated("(gen_random_uuid())::text"))
  gameId               String                 @map("game_id")
  name                 String
  description          String?
  isActive             Boolean                @default(false) @map("is_active")
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  currentParticipantId String?                @map("current_participant_id")
  currentTurn          Int?                   @map("current_turn")
  round                Int?                   @default(1)
  turnOrder            Json?                  @map("turn_order")
  diceRollLog          Json?                  @map("dice_roll_log")
  game                 Game                   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  monsters             EncounterMonster[]
  participants         EncounterParticipant[]

  @@index([gameId], map: "idx_encounters_game_id")
  @@index([isActive], map: "idx_encounters_is_active")
}

model EncounterMonster {
  id          String                     @id @default(dbgenerated("(gen_random_uuid())::text"))
  encounterId String                     @map("encounter_id")
  monsterName String                     @map("monster_name")
  monsterData Json                       @map("monster_data")
  quantity    Int                        @default(1)
  currentHP   Int?                       @map("current_hp")
  maxHP       Int                        @map("max_hp")
  isActive    Boolean                    @default(true) @map("is_active")
  createdAt   DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  encounter   Encounter                  @relation(fields: [encounterId], references: [id], onDelete: Cascade)
  instances   EncounterMonsterInstance[]

  @@index([encounterId], map: "idx_encounter_monsters_encounter_id")
  @@index([isActive], map: "idx_encounter_monsters_is_active")
}

model EncounterMonsterInstance {
  id                 String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  encounterMonsterId String           @map("encounter_monster_id")
  instanceNumber     Int              @map("instance_number")
  initiative         Int?
  currentHP          Int?             @map("current_hp")
  isActive           Boolean          @default(true) @map("is_active")
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  encounterMonster   EncounterMonster @relation(fields: [encounterMonsterId], references: [id], onDelete: Cascade)

  @@unique([encounterMonsterId, instanceNumber], map: "unique_encounter_monster_instance")
  @@index([encounterMonsterId], map: "idx_encounter_monster_instances_encounter_monster_id")
  @@index([isActive], map: "idx_encounter_monster_instances_is_active")
}

model EncounterParticipant {
  id            String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  encounterId   String    @map("encounter_id")
  characterId   String    @map("character_id")
  characterName String    @map("character_name")
  characterData Json      @map("character_data")
  initiative    Int?
  currentHP     Int?      @map("current_hp")
  maxHP         Int       @map("max_hp")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  encounter     Encounter @relation(fields: [encounterId], references: [id], onDelete: Cascade)

  @@index([encounterId], map: "idx_encounter_participants_encounter_id")
  @@index([characterId], map: "idx_encounter_participants_character_id")
  @@index([isActive], map: "idx_encounter_participants_is_active")
}
